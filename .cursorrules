# ü§ñ Cursor AI Rules - Little API Project

## üìã Principios Generales

- Este es un proyecto educativo enfocado en ense√±ar Next.js 15 y APIs
- El c√≥digo debe ser **educativo primero**, luego eficiente
- Cada pieza de c√≥digo debe incluir comentarios que expliquen el "por qu√©"
- Seguir las reglas detalladas en `.github/prompts/ai-coding-rules.md`

## üîß Tecnolog√≠as del Proyecto

- **Next.js**: 15.5.4 (App Router)
- **React**: 19.1.0
- **TypeScript**: 5.9.3
- **TailwindCSS**: 4.1.14
- **Package Manager**: pnpm (NO usar npm)

## üéØ Next.js 15 - Mejores Pr√°cticas (Context7)

### App Router (Obligatorio)

```typescript
// ‚úÖ CORRECTO - Usar App Router
// Archivo: app/api/ejemplo/route.ts
import { NextRequest } from 'next/server';

export async function GET(request: NextRequest): Promise<Response> {
  return Response.json({ data: 'ejemplo' });
}

// ‚ùå INCORRECTO - Pages Router (legacy)
// Archivo: pages/api/ejemplo.ts
export default function handler(req, res) {
  res.json({ data: 'ejemplo' });
}
```

### Route Handlers

- Usar `app/api/[nombre]/route.ts` para endpoints
- Exportar funciones nombradas: `GET`, `POST`, `PUT`, `DELETE`, `PATCH`
- Siempre tipar con `NextRequest` y `Promise<Response>`
- Usar `Response.json()` para respuestas JSON

### Fetch Mejorado (Next.js 15)

```typescript
// Usar opciones de cache nativas
const data = await fetch(url, {
  cache: 'no-store',           // No cachear
  next: { revalidate: 3600 },  // Revalidar cada hora
});
```

### Configuraci√≥n de Routes

```typescript
// Al final de route.ts
export const dynamic = 'force-dynamic';  // Sin cache
export const revalidate = 0;             // Siempre fresh
export const runtime = 'nodejs';         // Runtime
```

### Server Components por Defecto

- Todos los componentes en `app/` son Server Components por defecto
- Usar `'use client'` solo cuando sea necesario (interactividad, hooks)
- Aprovechar data fetching en el servidor

## üìù TypeScript Estricto

### Interfaces Siempre

```typescript
// ‚úÖ CORRECTO
interface ApiResponse {
  success: boolean;
  data?: {
    id: number;
    value: string;
  };
  error?: string;
}

export async function GET(): Promise<Response> {
  return Response.json({
    success: true,
    data: { id: 1, value: 'test' }
  } satisfies ApiResponse);
}

// ‚ùå INCORRECTO
export async function GET() {
  return Response.json({ success: true, data: { id: 1, value: 'test' } });
}
```

### Evitar `any`

```typescript
// ‚ùå INCORRECTO
const data: any = await response.json();

// ‚úÖ CORRECTO
interface ExpectedData {
  id: number;
  name: string;
}
const data: ExpectedData = await response.json();

// ‚úÖ Si el tipo es desconocido, usar unknown
const data: unknown = await response.json();
```

## üåê Consumo de APIs Externas

### Patr√≥n Est√°ndar

```typescript
export async function GET(request: NextRequest): Promise<Response> {
  try {
    // 1. Obtener y validar par√°metros
    const { searchParams } = new URL(request.url);
    const param = searchParams.get('param');
    
    if (param && !isValid(param)) {
      return Response.json(
        { success: false, error: 'Par√°metro inv√°lido' },
        { status: 400 }
      );
    }
    
    // 2. Fetch a API externa
    const response = await fetch(apiUrl, {
      cache: 'no-store',
      headers: { 'Accept': 'application/json' }
    });
    
    // 3. Verificar respuesta
    if (!response.ok) {
      if (response.status === 404) {
        return Response.json(
          { success: false, error: 'No encontrado' },
          { status: 404 }
        );
      }
      throw new Error(`API error: ${response.status}`);
    }
    
    // 4. Parsear y transformar
    const data: ExpectedInterface = await response.json();
    
    // 5. Devolver respuesta
    return Response.json({
      success: true,
      data: transformedData
    } satisfies ApiResponse);
    
  } catch (error) {
    console.error('Error:', error);
    return Response.json(
      { success: false, error: 'Error interno' },
      { status: 500 }
    );
  }
}
```

## üõ°Ô∏è Manejo de Errores

### Try/Catch Siempre

```typescript
// ‚úÖ CORRECTO
try {
  const data = await fetchData();
  return Response.json({ success: true, data });
} catch (error) {
  console.error('Error:', error);
  return Response.json(
    { success: false, error: 'Error interno' },
    { status: 500 }
  );
}
```

### Validaci√≥n de Inputs

```typescript
// Validar ANTES de usar
const id = searchParams.get('id');

if (id && (isNaN(Number(id)) || Number(id) <= 0)) {
  return Response.json(
    { success: false, error: 'ID debe ser un n√∫mero positivo' },
    { status: 400 }
  );
}
```

### Status Codes Apropiados

- `200` - Operaci√≥n exitosa
- `400` - Bad Request (par√°metros inv√°lidos)
- `404` - Not Found (recurso no encontrado)
- `500` - Internal Server Error (error del servidor)

## üîí Seguridad

### Variables de Entorno

```typescript
// ‚úÖ CORRECTO
const apiKey = process.env.API_KEY;

if (!apiKey) {
  throw new Error('API_KEY no configurada');
}

// ‚ùå INCORRECTO
const apiKey = 'sk_12345abc'; // Nunca hardcodear
```

### Protecci√≥n en Producci√≥n

```typescript
catch (error) {
  const isDev = process.env.NODE_ENV === 'development';
  
  return Response.json({
    success: false,
    error: isDev ? error.message : 'Error interno del servidor'
  }, { status: 500 });
}
```

## üß™ Chrome DevTools MCP - Debugging desde Cursor

### Cu√°ndo Usar Chrome DevTools MCP

Usa las herramientas de Chrome DevTools cuando necesites:
- Debugear aplicaciones web en tiempo real
- Inspeccionar requests de red
- Ver mensajes de consola
- Interactuar con elementos del DOM
- Tomar screenshots de la UI
- Testear performance
- Emular condiciones de red/CPU

### Funciones Disponibles

#### 1. Navegaci√≥n y P√°ginas

```typescript
// Listar p√°ginas abiertas
mcp_chrome-devtools_list_pages

// Navegar a una URL
mcp_chrome-devtools_navigate_page({ url: "http://localhost:3000" })

// Crear nueva pesta√±a
mcp_chrome-devtools_new_page({ url: "http://localhost:3000/api/advice" })

// Cerrar p√°gina
mcp_chrome-devtools_close_page({ pageIdx: 1 })
```

#### 2. Inspecci√≥n y Snapshots

```typescript
// Tomar snapshot de la p√°gina (mejor que screenshot para texto)
mcp_chrome-devtools_take_snapshot()

// Tomar screenshot
mcp_chrome-devtools_take_screenshot({
  format: "png",
  quality: 90,
  fullPage: true
})

// Screenshot de un elemento espec√≠fico
mcp_chrome-devtools_take_screenshot({
  uid: "elemento-123",
  format: "png"
})
```

#### 3. Debugging de Network

```typescript
// Listar todos los requests de red
mcp_chrome-devtools_list_network_requests({
  resourceTypes: ["fetch", "xhr"],
  pageSize: 20
})

// Obtener detalles de un request espec√≠fico
mcp_chrome-devtools_get_network_request({
  url: "http://localhost:3000/api/advice"
})
```

#### 4. Console y Logs

```typescript
// Ver mensajes de consola (console.log, errors, warnings)
mcp_chrome-devtools_list_console_messages()
```

#### 5. Interacci√≥n con el DOM

```typescript
// Click en elemento
mcp_chrome-devtools_click({ uid: "button-123" })

// Doble click
mcp_chrome-devtools_click({ uid: "button-123", dblClick: true })

// Hover sobre elemento
mcp_chrome-devtools_hover({ uid: "elemento-123" })

// Rellenar formulario
mcp_chrome-devtools_fill({ uid: "input-email", value: "test@example.com" })

// Rellenar m√∫ltiples campos
mcp_chrome-devtools_fill_form({
  elements: [
    { uid: "input-name", value: "John" },
    { uid: "input-email", value: "john@example.com" }
  ]
})
```

#### 6. Performance Testing

```typescript
// Emular CPU lenta (testing en dispositivos lentos)
mcp_chrome-devtools_emulate_cpu({ throttlingRate: 4 })

// Emular red lenta
mcp_chrome-devtools_emulate_network({ throttlingOption: "Slow 3G" })

// Performance trace
mcp_chrome-devtools_performance_start_trace({
  reload: true,
  autoStop: false
})

mcp_chrome-devtools_performance_stop_trace()

// Analizar insight espec√≠fico
mcp_chrome-devtools_performance_analyze_insight({
  insightName: "LCPBreakdown"
})
```

#### 7. Evaluaci√≥n de JavaScript

```typescript
// Ejecutar JavaScript en la p√°gina
mcp_chrome-devtools_evaluate_script({
  function: `() => {
    return document.title;
  }`
})

// Con argumentos (elementos del DOM)
mcp_chrome-devtools_evaluate_script({
  function: `(el) => {
    return el.innerText;
  }`,
  args: [{ uid: "elemento-123" }]
})
```

### Workflow de Debugging con Chrome DevTools MCP

#### Caso 1: Debugear un Endpoint API

```typescript
// 1. Abrir la p√°gina
mcp_chrome-devtools_navigate_page({ url: "http://localhost:3000" })

// 2. Tomar snapshot para ver el DOM
mcp_chrome-devtools_take_snapshot()

// 3. Hacer click en bot√≥n que llama al API
mcp_chrome-devtools_click({ uid: "button-fetch-advice" })

// 4. Ver requests de red
mcp_chrome-devtools_list_network_requests({
  resourceTypes: ["fetch"]
})

// 5. Inspeccionar request espec√≠fico
mcp_chrome-devtools_get_network_request({
  url: "http://localhost:3000/api/advice"
})

// 6. Ver errores en consola
mcp_chrome-devtools_list_console_messages()
```

#### Caso 2: Testear Performance

```typescript
// 1. Navegar a la p√°gina
mcp_chrome-devtools_navigate_page({ url: "http://localhost:3000" })

// 2. Emular condiciones reales
mcp_chrome-devtools_emulate_cpu({ throttlingRate: 4 })
mcp_chrome-devtools_emulate_network({ throttlingOption: "Fast 3G" })

// 3. Iniciar trace de performance
mcp_chrome-devtools_performance_start_trace({
  reload: true,
  autoStop: true
})

// 4. Analizar resultados
mcp_chrome-devtools_performance_analyze_insight({
  insightName: "LCPBreakdown"
})
```

#### Caso 3: Testing E2E Visual

```typescript
// 1. Navegar a la p√°gina
mcp_chrome-devtools_navigate_page({ url: "http://localhost:3000" })

// 2. Tomar snapshot inicial
mcp_chrome-devtools_take_snapshot()

// 3. Interactuar con la UI
mcp_chrome-devtools_fill_form({
  elements: [
    { uid: "input-breed", value: "husky" }
  ]
})

mcp_chrome-devtools_click({ uid: "button-submit" })

// 4. Esperar respuesta
mcp_chrome-devtools_wait_for({ text: "Resultado:", timeout: 5000 })

// 5. Tomar screenshot del resultado
mcp_chrome-devtools_take_screenshot({
  format: "png",
  fullPage: true,
  filePath: "tests/screenshots/result.png"
})

// 6. Verificar requests
mcp_chrome-devtools_list_network_requests()
```

### Mejores Pr√°cticas con Chrome DevTools MCP

1. **Siempre tomar snapshot primero** antes de interactuar con elementos para obtener los UIDs
2. **Usar list_network_requests** para debugear problemas de API
3. **Verificar console_messages** para ver logs y errores
4. **Emular condiciones reales** (red lenta, CPU lenta) para testing realista
5. **Tomar screenshots** para documentar bugs visuales
6. **Performance traces** para optimizar Core Web Vitals

### Integraci√≥n con Testing

```typescript
// Ejemplo: Testear endpoint visualmente
async function testAdviceEndpoint() {
  // 1. Navegar
  await mcp_chrome-devtools_navigate_page({ 
    url: "http://localhost:3000" 
  });
  
  // 2. Snapshot
  const snapshot = await mcp_chrome-devtools_take_snapshot();
  
  // 3. Click en link del endpoint
  await mcp_chrome-devtools_click({ uid: "link-advice" });
  
  // 4. Esperar respuesta
  await mcp_chrome-devtools_wait_for({ 
    text: "success", 
    timeout: 3000 
  });
  
  // 5. Verificar network request
  const requests = await mcp_chrome-devtools_list_network_requests({
    resourceTypes: ["fetch"]
  });
  
  // 6. Screenshot del resultado
  await mcp_chrome-devtools_take_screenshot({
    filePath: "tests/advice-endpoint.png"
  });
  
  // 7. Verificar consola
  const logs = await mcp_chrome-devtools_list_console_messages();
  
  return { requests, logs, snapshot };
}
```

## üìö Documentaci√≥n Educativa

### Comentarios en el C√≥digo

```typescript
/**
 * üìö ENDPOINT DE EJEMPLO
 * 
 * Breve descripci√≥n del prop√≥sito del endpoint.
 * 
 * üéØ Conceptos clave:
 * - Concepto 1
 * - Concepto 2
 * 
 * @example
 * GET /api/ejemplo
 * GET /api/ejemplo?param=valor
 */

// ‚úÖ PASO 1: Descripci√≥n del paso
// Explicaci√≥n de por qu√© hacemos esto

// ‚úÖ PASO 2: Siguiente paso
// M√°s explicaci√≥n educativa
```

### JSDoc para Funciones

```typescript
/**
 * Descripci√≥n de la funci√≥n
 * 
 * @param request - Objeto NextRequest
 * @returns Response JSON con datos o error
 * 
 * @example
 * GET /api/ejemplo?id=42
 */
export async function GET(request: NextRequest): Promise<Response> {
  // ...
}
```

## ‚úÖ Checklist Antes de Commit

- [ ] C√≥digo tipado completamente (sin `any`)
- [ ] Interfaces definidas para todas las respuestas
- [ ] Try/catch para manejo de errores
- [ ] Validaci√≥n de par√°metros de entrada
- [ ] Status codes HTTP apropiados
- [ ] Comentarios educativos incluidos
- [ ] Ejemplos de uso en comentarios
- [ ] Tests manuales completados (o con Chrome DevTools MCP)
- [ ] Sin errores de linting (`pnpm lint`)
- [ ] Documentaci√≥n actualizada si aplica

## üö´ Anti-Patrones a Evitar

```typescript
// ‚ùå NO usar Pages Router
// pages/api/ejemplo.ts

// ‚ùå NO usar any
const data: any = await response.json();

// ‚ùå NO hardcodear secretos
const apiKey = 'sk_12345';

// ‚ùå NO ignorar errores
fetch(url); // Sin await ni manejo de errores

// ‚ùå NO devolver respuestas sin estructura
return Response.json({ data: 'ok' }); // Sin success, sin tipado

// ‚ùå NO usar npm
npm install paquete // Usar: pnpm add paquete
```

## üì¶ Package Manager: pnpm

```bash
# ‚úÖ CORRECTO
pnpm install
pnpm add paquete
pnpm add -D paquete-dev
pnpm dev
pnpm build

# ‚ùå INCORRECTO
npm install
npm install paquete
```

## üéØ Estructura de Respuestas Consistente

```typescript
// Todas las respuestas deben seguir este formato:
interface StandardResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}

// √âxito
return Response.json({
  success: true,
  data: { /* datos */ }
} satisfies StandardResponse<DataType>);

// Error
return Response.json({
  success: false,
  error: 'Mensaje de error claro'
} satisfies StandardResponse<never>, {
  status: 400 // Status code apropiado
});
```

---

**Para m√°s detalles, consulta**: `.github/prompts/ai-coding-rules.md`


